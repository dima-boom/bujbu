try:
	import telebot, os, time, vk_api, vk_captchasolver as vc, random, requests as r
	#os.system("cls")


	bot = telebot.TeleBot("2013056935:AAHLlHvu4qHXn5hTArJw-hGHTdeA3em71r8")

	def msg(id, text, kb, pm=None):
		send = bot.send_message(id, str(text), reply_markup=kb, parse_mode=pm)
		return send
	def msg_edit(chat_id, message_id, text, kb, pm=None):
		bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=kb, parse_mode=pm)
	def msg_new(message, func):
		return bot.register_next_step_handler(message, func)
	def msg_delete(chat_id, message_id):
		bot.delete_message(chat_id, message_id)
	def reply(message, text):
		bot.reply_to(message, text)

	def reply_keyboard():
		reply_kb = telebot.types.ReplyKeyboardMarkup(True)
		return reply_kb
	def inline_keyboard(rw=2):
		inline_kb = telebot.types.InlineKeyboardMarkup(row_width=rw)
		return inline_kb
	def ik_button(name, callback):
		button = telebot.types.InlineKeyboardButton(name, callback_data=callback)
		return button
	def ik_button_url(name, url):
		button = telebot.types.InlineKeyboardButton(name, url=url)
		return button

	kb = reply_keyboard()
	kb.row("‚ö°–†–∞—Å—Å—ã–ª–∫–∞", "–ö–æ–Ω—Ñ–∏–≥üìÇ")
	kb.row("üîô–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞‚ö°")

	kb_info = inline_keyboard()
	kb_info.add(ik_button("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "openinfo"))

	kb_close = inline_keyboard()
	kb_close.add(ik_button("‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå", "close"))

	kb_back = reply_keyboard()
	kb_back.row("–û—Ç–º–µ–Ω–∞")

	configs = {"1105536555": ["token", "text"],
			   "770430694": ["token", "text"]}
	mailing_sbor = {"1105536555": {"token": None,
								  "text": None},
					"770430694": {"token": None,
								  "text": None}}
	last_mailing = {"success": 0,
					"fail": 0,
					"all": 0,
					"total_time": 0,
					"one_time": 0,
					"search_group": 0,
					}
	last_group = 0
	mailing = False

	@bot.message_handler(content_types=["text"])
	def send_text(message):
		global mailing
		nickname = message.chat.username # –ù–∏–∫ —é–∑–µ—Ä–∞
		name = message.chat.first_name # –ò–º—è
		id = message.chat.id # –ê–π–¥–∏
		text = message.text # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		if str(id) in ["1105536555", "770430694"]:
			if text == "/start":
				msg(id, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:", kb)
			elif text == "–ö–æ–Ω—Ñ–∏–≥üìÇ":
				kb_config = inline_keyboard()
				kb_config.add(ik_button("–¢–æ–∫–µ–Ω", str(id)+" 0"), ik_button("–¢–µ–∫—Å—Ç", str(id)+" 1"))
				kb_config.add(ik_button("–†–µ–¥. –¢–æ–∫–µ–Ω", str(id)+" new 0"), ik_button("–†–µ–¥. –¢–µ–∫—Å—Ç", str(id)+" new 1"))
				msg(id, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏:", kb_config)
			elif text == "üîô–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞‚ö°":
				if mailing == True:
					msg(id, "–†–∞—Å—Å—ã–ª–∫–∞ –∫–µ–º-—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", kb)
				else:
					txt = "‚úÖ–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - "+str(last_mailing["success"])+"\n---------------------------\n‚ùå–ù–µ —É–¥–∞—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - "+str(last_mailing["fail"])+"\n---------------------------\n‚ôæÔ∏è–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - "+str(last_mailing["all"])+"\n---------------------------\nüïí–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - "+str(last_mailing["total_time"])+" —Å.\n---------------------------\nüïò–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ 1 —Å–º—Å - "+str(last_mailing["one_time"])+" —Å.\n---------------------------\nüîé–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø - "+str(last_mailing["search_group"])
					msg(id, txt, kb_close)
			elif text == "‚ö°–†–∞—Å—Å—ã–ª–∫–∞":
				if mailing == True:
					msg(id, "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∫–µ–º-—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞", kb)
				else:
					kb_new_rass = inline_keyboard()
					kb_new_rass.add(ik_button("–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–π –¢–æ–∫–µ–Ω", "readytoken"), ik_button("–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–π –¢–µ–∫—Å—Ç", "readytext"))
					kb_new_rass.add(ik_button("–î—Ä—É–≥–æ–π –¢–æ–∫–µ–Ω", "newtoken"), ik_button("–î—Ä—É–≥–æ–π –¢–µ–∫—Å—Ç", "newtext"))
					kb_new_rass.add(ik_button("–°–±—Ä–æ—Å", "newnew"), ik_button("–û–±–Ω–æ–≤–∏—Ç—å", "update"))
					kb_new_rass.add(ik_button("üèÅ –ó–∞–ø—É—Å–∫ üõéÔ∏è", "mailing_start"))
					if mailing_sbor[str(id)]["token"] == None:
						tkn = "‚ùå"
					if mailing_sbor[str(id)]["token"] != None:
						tkn = "‚úÖ"
					if mailing_sbor[str(id)]["text"] == None:
						txts = "‚ùå"
					if mailing_sbor[str(id)]["text"] != None:
						txts = "‚úÖ"
					msg(id, "token - "+tkn+"\ntext - "+txts+"\n\n–°–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ:", kb_new_rass)
			elif text == "/new":
				mailing = False


	@bot.callback_query_handler(func=lambda call: True)
	def callback(call):
		text = call.data
		id = call.message.chat.id
		message_id = call.message.message_id
		nickname = call.message.chat.username
		name = call.message.chat.first_name
		global last_group

		if text == "close":
			msg_delete(id, message_id)
		elif text in ["readytoken", "readytext"]:
			if text == "readytoken":
				if mailing_sbor[str(id)]["token"] != None and mailing_sbor[str(id)]["token"] == configs[str(id)][0]:
					msg(id, "üïí*–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω*", kb, pm="Markdown")
				else:
					token = configs[str(id)][0]
					for i in range(2, 4):
						try:
							vk_session = vk_api.VkApi(token=token)
							vk = vk_session.get_api()
							aaaaa = vk.status.get(user_id=554311036)["text"]
							mailing_sbor[str(id)]["token"] = token
							msg(id, "‚úÖ*–í —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω*", kb, pm="Markdown")
							break
						except vk_api.ApiError:
							if i == 3:
								msg(id, "‚ùå*–ê–∫–∫–∞—É–Ω—Ç –ø–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*", kb, pm="Markdown")
							else:
								continue
						except:
							msg(id, "‚ùå*–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É*", kb, pm="Markdown")
							break
			elif text == "readytext":
				if configs[str(id)][1] == "text":
					msg(id, "‚ùå*–í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç*", kb, pm="Markdown")
				elif mailing_sbor[str(id)]["text"] != None and mailing_sbor[str(id)]["text"] == configs[str(id)][1]:
					msg(id, "üïí*–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç*", kb, pm="Markdown")
				else:
					mailing_sbor[str(id)]["text"] = configs[str(id)][1]
					msg(id, "‚úÖ*–í —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç*", kb, pm="Markdown")
		elif text in ["newtoken", "newtext"]:
			if text == "newtoken":
				def new_rass_token(message):
					text = message.text
					ids = message.chat.id
					if text == "–û—Ç–º–µ–Ω–∞":
						a = msg(ids, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", kb)
					else:
						for i in range(2, 4):
							try:
								vk_session = vk_api.VkApi(token=text)
								vk = vk_session.get_api()
								aaaaa = vk.status.get(user_id=554311036)["text"]
								mailing_sbor[str(ids)]["token"] = text
								msg(ids, "‚úÖ*–í —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω*", kb, pm="Markdown")
								break
							except vk_api.ApiError:
								if i == 3:
									msg(ids, "‚ùå*–ê–∫–∫–∞—É–Ω—Ç –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*", kb, pm="Markdown")
								else:
									continue
							except:
								msg(ids, "‚ùå*–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É*", kb, pm="Markdown")
								break
				a = msg(id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: ", kb_back)
				msg_new(a, new_rass_token)
			elif text == "newtext":
				def new_rass_text(message):
					text = message.text
					ids = message.chat.id
					if text == "–û—Ç–º–µ–Ω–∞":
						a = msg(ids, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", kb)
					else:
						mailing_sbor[str(ids)]["text"] = text
						msg(ids, "‚úÖ*–í —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç*", kb, pm="Markdown")
				a = msg(id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ", kb_back)
				msg_new(a, new_rass_text)
		elif text == "openinfo":
			txt = "‚úÖ–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - "+str(last_mailing["success"])+"\n---------------------------\n‚ùå–ù–µ —É–¥–∞—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - "+str(last_mailing["fail"])+"\n---------------------------\n‚ôæÔ∏è–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - "+str(last_mailing["all"])+"\n---------------------------\nüïí–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - "+str(last_mailing["total_time"])+" —Å.\n---------------------------\nüïò–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ 1 —Å–º—Å - "+str(last_mailing["one_time"])+" —Å.\n---------------------------\nüîé–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø - "+str(last_mailing["search_group"])
			msg(id, txt, kb_close)
		elif text == "newnew":
			mailing_sbor[str(id)]["token"] = None
			mailing_sbor[str(id)]["text"] = None
			msg(id, "‚úÖ*–£—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ!*", kb, pm="Markdown")
		elif text == "update":
			msg_edit(id, message_id, "–°–µ–∫—É–Ω–¥—É...", None)
			kb_new_rass = inline_keyboard()
			kb_new_rass.add(ik_button("–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–π –¢–æ–∫–µ–Ω", "readytoken"), ik_button("–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–π –¢–µ–∫—Å—Ç", "readytext"))
			kb_new_rass.add(ik_button("–î—Ä—É–≥–æ–π –¢–æ–∫–µ–Ω", "newtoken"), ik_button("–î—Ä—É–≥–æ–π –¢–µ–∫—Å—Ç", "newtext"))
			kb_new_rass.add(ik_button("–°–±—Ä–æ—Å", "newnew"), ik_button("–û–±–Ω–æ–≤–∏—Ç—å", "update"))
			kb_new_rass.add(ik_button("üèÅ –ó–∞–ø—É—Å–∫ üõéÔ∏è", "mailing_start"))
			if mailing_sbor[str(id)]["token"] == None:
				tkn = "‚ùå"
			if mailing_sbor[str(id)]["token"] != None:
				tkn = "‚úÖ"
			if mailing_sbor[str(id)]["text"] == None:
				txts = "‚ùå"
			if mailing_sbor[str(id)]["text"] != None:
				txts = "‚úÖ"
			time.sleep(1)
			msg_edit(id, message_id, "token - "+tkn+"\ntext - "+txts+"\n\n–°–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ:", kb_new_rass)

		elif text == "mailing_start":
			if mailing_sbor[str(id)]["token"] == None or mailing_sbor[str(id)]["text"] == None:
				msg(id, "–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!", kb)
			else:
				vk_session = vk_api.VkApi(token=mailing_sbor[str(id)]["token"])
				vk = vk_session.get_api()
				aaaaa = vk.status.get(user_id=554311036)["text"]
				while True:
					try:
						first_group = vk.groups.create(title="–†–µ–º–æ–Ω—Ç –∞–≤—Ç–æ "+str(random.randint(1000, 9999)))["id"]
						break
					except vk_api.Captcha as group_captch:
						result_solve_captcha = vc.solve(sid=int(group_captch.sid), s=1)
						try:
							group_captch.try_again(result_solve_captcha)
						except vk_api.Captcha as cptch2:
							continue
				it_og = first_group-last_group
				msg(id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–æ `"+str(it_og)+"` –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏", kb, pm="Markdown")
				col_group = 0


				def red_col(message):
					global mailing
					global col_group
					global last_group
					vk_session = vk_api.VkApi(token=mailing_sbor[str(id)]["token"])
					vk = vk_session.get_api()
					aaaaa = vk.status.get(user_id=554311036)["text"]
					text = message.text
					ids = message.chat.id
					if text == "–û—Ç–º–µ–Ω–∞":
						a = msg(ids, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", kb)
					else:
						try:
							text = int(text)
							if text > first_group:
								msg(id, "‚ùå–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥—Ä—É–ø–ø", kb)
								return
							elif text < 500:
								msg(id, "‚ùå–ù–µ –º–µ–Ω—å—à–µ 500", kb)
								return
							else:
								col_group = text
								mailing = True
								msg(id, "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ "+str(col_group)+" –≥—Ä—É–ø–ø...", kb)

								sp_group = []
								itogg = []
								grp = first_group-col_group
								start = time.time()
								for i in range(col_group//500):
									sp_group = []
									for k in range(500):
										sp_group.append(str(grp))
										grp+=1
									new_sp = vk.groups.getById(group_ids=sp_group, fields="can_message")
									for j in new_sp:
										if j["can_message"] == 1:
											itogg.append(int(j['id']))
										else:
											continue
								end = time.time()
								msg(id, "–í—Ä–µ–º—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–æ - `"+str(end-start)+"`\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ - `"+str(len(itogg))+"` –≥—Ä—É–ø–ø", kb, pm="Markdown")

								what_stop = "stop"
								col = 1
								success = 0
								fail = 0
								start_2 = time.time()
								lastts = ""
								for D in itogg:
									lastts = str(D)
									try:
										vk.messages.send(peer_id=-D, random_id=0, message=mailing_sbor[str(id)]["text"])
										success += 1
										col += 1
									except vk_api.Captcha:
										cycle = True
										while cycle:
											try:
												vk.messages.send(peer_id=-D, random_id=0, message=mailing_sbor[str(id)]["text"])
											except vk_api.Captcha as cptch:
												result_solve_captcha = vc.solve(sid=int(cptch.sid), s=1)
												try:
													cptch.try_again(result_solve_captcha)
													cycle = False
												except vk_api.Captcha as cptch2:
													pass
											except:
												pass
									except vk_api.ApiError:
										try:
											vk_session = vk_api.VkApi(token=mailing_sbor[str(id)]["token"])
											vk = vk_session.get_api()
											vk.status.get()
										except vk_api.ApiError:
											what_stop = "ban"
											break
									except:
										fail += 1
										col += 1
								end_2 = time.time()

								last_group = int(lastts)
								if what_stop == "stop":
									txt_stop = "*–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç.–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥—Ä—É–ø–ø—ã*"
								else:
									txt_stop = "*–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç.–∫ –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω*"
								try:
									last_mailing["success"] = int(success)
								except:
									pass
								try:
									last_mailing["fail"] = int(fail)
								except:
									pass
								try:
									last_mailing["all"] = int(success+fail)
								except:
									pass
								try:
									last_mailing["total_time"] = int(end_2-start_2)
								except:
									pass
								try:
									last_mailing["one_time"] = str((end_2-start_2)/col)
								except:
									pass
								try:
									last_mailing["search_group"] = len(itogg)-1
								except:
									pass
								mailing = False
								msg(id, "*–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*", kb, pm="Markdown")
								msg(id, txt_stop, kb_info, pm="Markdown")
						except:
							msg(id, "‚ùå–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ", kb)
				a = msg(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø:", kb_back)
				msg_new(a, red_col)



		try:
			if text.split()[1] in ["0", "1"]:
				name = configs[str(id)][int(text.split()[1])]
				if name == "token":
					a = msg(id, "‚ùå*–í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω*", None, pm="Markdown")
					time.sleep(2)
					msg_delete(id, a.message_id)
				elif name == "text":
					a = msg(id, "‚ùå*–í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç*", None, pm="Markdown")
					time.sleep(2)
					msg_delete(id, a.message_id)
				else:
					msg(id, "`"+name+"`", kb_close, pm="Markdown")
			elif text.split()[1] == "new":
				def new_text(message):
					text = message.text
					ids = message.chat.id
					if text == "–û—Ç–º–µ–Ω–∞":
						a = msg(ids, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", kb)
						time.sleep(2)
						b = a.message_id
						c = 0
						for i in range(3):
							msg_delete(ids, b-c)
							c += 1
					else:
						token_s = configs[str(ids)][0]
						new = [token_s, text]
						configs[str(ids)] = new
						msg(ids, "‚úÖ*–¢–µ–∫—Å—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω*", kb, pm="Markdown")
				def new_token(message):
					text = message.text
					ids = message.chat.id
					if text == "–û—Ç–º–µ–Ω–∞":
						a = msg(ids, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", None)
						time.sleep(2)
						b = a.message_id
						c = 0
						for i in range(3):
							msg_delete(ids, b-c)
							c += 1
					else:
						for i in range(2, 4):
							try:
								vk_session = vk_api.VkApi(token=text)
								vk = vk_session.get_api()
								aaaaa = vk.status.get(user_id=554311036)["text"]
								text_s = configs[str(ids)][1]
								new = [text, text_s]
								configs[str(ids)] = new
								msg(ids, "‚úÖ*–¢–æ–∫–µ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω*", kb, pm="Markdown")
								break
							except vk_api.ApiError:
								if i == 3:
									msg(id, "‚ùå*–ê–∫–∫–∞—É–Ω—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*", kb, pm="Markdown")
								else:
									continue
							except:
								msg(id, "‚ùå*–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —Ç–æ–∫–µ–Ω—É*", kb, pm="Markdown")
								break

				what = text.split()[2]
				if what == "0":
					a = msg(id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:", kb_back)
					msg_new(a, new_token)
				else:
					a = msg(id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:", kb_back)
					msg_new(a, new_text)
		except:
			pass

	bot.polling(none_stop=True)
except:
	os.system('python Musor.py')
